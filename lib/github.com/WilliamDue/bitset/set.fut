import "bitset"


-- module mk_set (B: bitset) : set = {
--     
    -- def universe_find_index (a : t) : i64 =
    --     let cmp a b = if b.0 then b else a
    --     in (reduce_comm cmp (false, -1) (zip (map (U.==a) U.universe) (indices U.universe))).1
    -- 
    -- def universe_look_up ((i, bit_i) : (i64, i32)) : t =
    --     let num_bits = i64.i32 u8.num_bits
    --     let idx = i * num_bits + i64.i32 bit_i
    --     in copy U.universe[idx]
    -- 
    -- def universe_member (a : t) : bool =
    --     -1 != universe_find_index a
    --
    -- def from_just 'a (ne : a) (a : maybe a) : a =
    --     match a
    --     case #just a' -> a'
    --     case _ -> ne
    -- 
    -- def is_just 'a (a : maybe a) : bool =
    --     match a
    --     case #just _ -> true
    --     case _ -> false
    -- 
    -- def set_elements_indices (a : set) : [](i64, i32) =
    --     map2 (\i v -> 
    --         map (\bit_i' ->
    --             let bit_i = i32.i64 bit_i'
    --             in if u8.get_bit bit_i v i32.== 1
    --                then #just (i, bit_i)
    --                else #nothing
    --         ) (iota (i64.i32 u8.num_bits))
    --     ) (indices a) a
    --     |> flatten
    --     |> filter is_just
    --     |> map (from_just (-1, -1))
    -- 
    -- def to_array (a : set) : []t =
    --     set_elements_indices a
    --     |> map universe_look_up
-- }